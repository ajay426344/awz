---
- name: ESXi Pre-check Stage with Dynatrace Monitoring
  hosts: all
  gather_facts: no
  vars:
    ansible_user: root
    ansible_password: "Ajay@426344"
    ansible_connection: ssh
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    dynatrace_url: "https://ofp39563.live.dynatrace.com"
    dynatrace_token: "{{ dynatrace_api_token }}"
    minimum_space_gb: 3  # Minimum required space in GB
  
  tasks:
    - name: Set timestamps
      set_fact:
        current_epoch: "{{ now().strftime('%s') }}"
        current_iso: "{{ now().isoformat() }}"
      run_once: true
      
    - name: Send pre-check start event to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/events/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          eventType: "CUSTOM_INFO"
          title: "ESXi Pre-check Started"
          properties:
            host: "{{ inventory_hostname }}"
            phase: "precheck"
            timestamp: "{{ current_iso }}"
        status_code: [200, 201, 202]
      delegate_to: localhost
      vars:
        ansible_connection: local
      
    - name: Test SSH connectivity
      wait_for_connection:
        timeout: 30
      register: ssh_check
      
    - name: Get ESXi version information
      raw: vmware -v
      register: version_output
      
    - name: Extract build number
      raw: vmware -v | grep -o 'build-[0-9]*' | cut -d'-' -f2
      register: current_build_raw
      
    - name: Check datastore space using esxcli
      raw: |
        esxcli storage filesystem list | grep -E "VMFS|NFS" | while read line; do
          vol=$(echo "$line" | awk '{print $2}')
          size=$(echo "$line" | awk '{print $3}')
          free=$(echo "$line" | awk '{print $5}')
          # Convert bytes to GB (divide by 1073741824)
          if [ "$free" -gt 0 ] 2>/dev/null; then
            free_gb=$((free / 1073741824))
            echo "${vol}:${free_gb}"
          fi
        done | sort -t: -k2 -rn | head -1
      register: datastore_esxcli
      
    - name: Alternative datastore check using vdf
      raw: |
        vdf -h 2>/dev/null | grep -E "VMFS|NFS" | while read line; do
          vol=$(echo "$line" | awk '{print $1}')
          avail=$(echo "$line" | awk '{print $4}')
          # Extract number and convert if needed
          if echo "$avail" | grep -q "G"; then
            free_gb=$(echo "$avail" | sed 's/G//')
          elif echo "$avail" | grep -q "T"; then
            free_gb=$(echo "$avail" | sed 's/T//' | awk '{print int($1 * 1024)}')
          else
            free_gb=0
          fi
          echo "${vol}:${free_gb}"
        done | sort -t: -k2 -rn | head -1
      register: datastore_vdf
      when: datastore_esxcli.stdout == ""
      
    - name: Fallback datastore check using df
      raw: |
        df -h | grep "/vmfs/volumes/" | while read line; do
          vol=$(echo "$line" | awk '{print $6}')
          avail=$(echo "$line" | awk '{print $4}')
          # Extract number and convert if needed
          if echo "$avail" | grep -q "G"; then
            free_gb=$(echo "$avail" | sed 's/G//' | awk '{print int($1)}')
          elif echo "$avail" | grep -q "T"; then
            free_gb=$(echo "$avail" | sed 's/T//' | awk '{print int($1 * 1024)}')
          elif echo "$avail" | grep -q "M"; then
            free_gb=0
          else
            free_gb=0
          fi
          if [ "$free_gb" -gt 0 ]; then
            echo "${vol}:${free_gb}"
          fi
        done | sort -t: -k2 -rn | head -1
      register: datastore_df
      when: 
        - datastore_esxcli.stdout == ""
        - datastore_vdf.stdout | default("") == ""
      
    - name: Debug all datastore check results
      debug:
        msg:
          - "esxcli result: {{ datastore_esxcli.stdout | default('empty') }}"
          - "vdf result: {{ datastore_vdf.stdout | default('not run or empty') }}"
          - "df result: {{ datastore_df.stdout | default('not run or empty') }}"
      
    - name: Parse datastore information
      set_fact:
        datastore_result: >-
          {%- if datastore_esxcli.stdout and ':' in datastore_esxcli.stdout -%}
            {{ datastore_esxcli.stdout | trim }}
          {%- elif datastore_vdf.stdout | default("") and ':' in datastore_vdf.stdout -%}
            {{ datastore_vdf.stdout | trim }}
          {%- elif datastore_df.stdout | default("") and ':' in datastore_df.stdout -%}
            {{ datastore_df.stdout | trim }}
          {%- else -%}
            none:0
          {%- endif -%}
      
    - name: Set host facts
      set_fact:
        host_ssh_status: "{{ 'PASS' if ssh_check.elapsed < 30 else 'FAIL' }}"
        host_current_build: "{{ current_build_raw.stdout | trim }}"
        host_version: "{{ version_output.stdout | trim }}"
        host_selected_datastore: "{{ datastore_result.split(':')[0] if ':' in datastore_result else 'none' }}"
        host_available_space: "{{ datastore_result.split(':')[1] | int if ':' in datastore_result else 0 }}"
        precheck_timestamp: "{{ current_epoch }}"
        
    - name: Determine pre-check status
      set_fact:
        precheck_passed: "{{ host_ssh_status == 'PASS' and host_available_space | int >= minimum_space_gb | int }}"
        precheck_warnings: >-
          {%- set warnings = [] -%}
          {%- if host_ssh_status != 'PASS' -%}
            {%- set _ = warnings.append('SSH connectivity issue') -%}
          {%- endif -%}
          {%- if host_available_space | int < minimum_space_gb | int -%}
            {%- set _ = warnings.append('Insufficient datastore space: ' + host_available_space | string + 'GB available, ' + minimum_space_gb | string + 'GB required') -%}
          {%- endif -%}
          {{ warnings | join(', ') if warnings else 'None' }}
        
    - name: Send pre-check metrics to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/metrics/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "text/plain; charset=utf-8"
        body: |
          esxi.patch.precheck.ssh_status,host={{ inventory_hostname }} {{ 1 if host_ssh_status == 'PASS' else 0 }} {{ precheck_timestamp }}
          esxi.patch.precheck.build_number,host={{ inventory_hostname }} {{ host_current_build }} {{ precheck_timestamp }}
          esxi.patch.precheck.datastore_space_gb,host={{ inventory_hostname }} {{ host_available_space }} {{ precheck_timestamp }}
          esxi.patch.precheck.status,host={{ inventory_hostname }} {{ 1 if precheck_passed else 0 }} {{ precheck_timestamp }}
        status_code: [200, 201, 202, 204]
      delegate_to: localhost
      vars:
        ansible_connection: local
      
    - name: Send pre-check completion event to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/events/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          eventType: "CUSTOM_INFO"
          title: "ESXi Pre-check {{ 'Passed' if precheck_passed else 'Failed' }}"
          properties:
            host: "{{ inventory_hostname }}"
            phase: "precheck"
            status: "{{ 'passed' if precheck_passed else 'failed' }}"
            current_build: "{{ host_current_build }}"
            available_space_gb: "{{ host_available_space }}"
            required_space_gb: "{{ minimum_space_gb }}"
            ssh_status: "{{ host_ssh_status }}"
            warnings: "{{ precheck_warnings }}"
            severity: "{{ 'INFO' if precheck_passed else 'ERROR' }}"
        status_code: [200, 201, 202]
      delegate_to: localhost
      vars:
        ansible_connection: local
      
    - name: Display pre-check results
      debug:
        msg:
          - "========================================="
          - "Host: {{ inventory_hostname }}"
          - "SSH Status: {{ host_ssh_status }}"
          - "Current Build: {{ host_current_build }}"
          - "Selected Datastore: {{ host_selected_datastore }}"
          - "Available Space: {{ host_available_space }}GB (Required: {{ minimum_space_gb }}GB)"
          - "Pre-check Status: {{ 'PASSED ✓' if precheck_passed else 'FAILED ✗' }}"
          - "Warnings: {{ precheck_warnings }}"
          - "========================================="
          
    - name: Fail if pre-check doesn't pass
      fail:
        msg: "Pre-check failed! {{ precheck_warnings }}"
      when: not precheck_passed
          
    - name: Save pre-check results
      set_stats:
        data:
          "{{ inventory_hostname | replace('-', '_') }}_precheck": "{{ 'passed' if precheck_passed else 'failed' }}"
          "{{ inventory_hostname | replace('-', '_') }}_build": "{{ host_current_build }}"
          "{{ inventory_hostname | replace('-', '_') }}_datastore": "{{ host_selected_datastore }}"
          "{{ inventory_hostname | replace('-', '_') }}_space_gb": "{{ host_available_space }}"
