---
- name: ESXi Pre-check Stage with Dynatrace Monitoring
  hosts: all
  gather_facts: no
  vars:
    ansible_user: root
    ansible_password: "Ajay@426344"
    ansible_connection: ssh
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    dynatrace_url: "https://ofp39563.live.dynatrace.com"
    dynatrace_token: "{{ dynatrace_token }}"
  
  tasks:
    - name: Set timestamps
      set_fact:
        current_epoch: "{{ now().strftime('%s') }}"
        current_iso: "{{ now().isoformat() }}"
      run_once: true
      
    - name: Send pre-check start event to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/events/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          eventType: "CUSTOM_INFO"
          title: "ESXi Pre-check Started"
          properties:
            host: "{{ inventory_hostname }}"
            phase: "precheck"
            timestamp: "{{ current_iso }}"
        status_code: [200, 201, 202]
      delegate_to: localhost
      vars:
        ansible_connection: local
      
    - name: Test SSH connectivity
      wait_for_connection:
        timeout: 30
      register: ssh_check
      
    - name: Get ESXi version information
      raw: vmware -v
      register: version_output
      
    - name: Extract build number
      raw: vmware -v | grep -o 'build-[0-9]*' | cut -d'-' -f2
      register: current_build_raw
      
    - name: Debug - Check all datastores
      raw: esxcli storage filesystem list
      register: all_datastores_debug
      
    - name: Display all datastores for debugging
      debug:
        msg: "{{ all_datastores_debug.stdout_lines }}"
      
    - name: Check available datastores with free space (in GB)
      raw: |
        esxcli storage filesystem list | grep -E "VMFS|NFS" | while read line; do
          vol=$(echo "$line" | awk '{print $1}')
          free=$(echo "$line" | awk '{print $5}')
          free_gb=$(echo "$free / 1073741824" | bc 2>/dev/null || echo "0")
          if [ -z "$free_gb" ]; then free_gb=0; fi
          echo "${vol}:${free_gb}"
        done | grep -v ":0$" | head -1
      register: datastore_info
      
    - name: Alternative datastore check if first fails
      raw: |
        df -h | grep -E "VMFS|datastore" | awk '{
          gsub(/[GMK]/, "", $4);
          if ($4 > 3) print $6":"$4
        }' | head -1
      register: datastore_alt
      when: datastore_info.stdout == ""
      
    - name: Debug datastore results
      debug:
        msg:
          - "Primary check result: {{ datastore_info.stdout }}"
          - "Alternative check result: {{ datastore_alt.stdout | default('not run') }}"
      
    - name: Set host facts
      set_fact:
        host_ssh_status: "{{ 'PASS' if ssh_check.elapsed < 30 else 'FAIL' }}"
        host_current_build: "{{ current_build_raw.stdout | trim }}"
        host_version: "{{ version_output.stdout | trim }}"
        host_selected_datastore: "{{ (datastore_info.stdout.split(':')[0] if datastore_info.stdout else datastore_alt.stdout.split(':')[0]) if (datastore_info.stdout or datastore_alt.stdout | default('')) else '/vmfs/volumes/datastore1' }}"
        host_available_space: "{{ (datastore_info.stdout.split(':')[1] if datastore_info.stdout else datastore_alt.stdout.split(':')[1]) if (datastore_info.stdout or datastore_alt.stdout | default('')) else '0' }}"
        precheck_timestamp: "{{ current_epoch }}"
        
    - name: Determine pre-check status
      set_fact:
        precheck_passed: "{{ host_ssh_status == 'PASS' and (host_available_space|float > 3 or all_datastores_debug.stdout is search('VMFS')) }}"
        
    - name: Send pre-check metrics to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/metrics/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "text/plain; charset=utf-8"
        body: |
          esxi.patch.precheck.ssh_status,host={{ inventory_hostname }} {{ 1 if host_ssh_status == 'PASS' else 0 }} {{ precheck_timestamp }}
          esxi.patch.precheck.build_number,host={{ inventory_hostname }} {{ host_current_build }} {{ precheck_timestamp }}
          esxi.patch.precheck.datastore_space_gb,host={{ inventory_hostname }} {{ host_available_space }} {{ precheck_timestamp }}
          esxi.patch.precheck.status,host={{ inventory_hostname }} {{ 1 if precheck_passed else 0 }} {{ precheck_timestamp }}
        status_code: [200, 201, 202, 204]
      delegate_to: localhost
      vars:
        ansible_connection: local
      
    - name: Send pre-check completion event to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/events/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          eventType: "CUSTOM_INFO"
          title: "ESXi Pre-check {{ 'Passed' if precheck_passed else 'Failed' }}"
          properties:
            host: "{{ inventory_hostname }}"
            phase: "precheck"
            status: "{{ 'passed' if precheck_passed else 'failed' }}"
            current_build: "{{ host_current_build }}"
            available_space_gb: "{{ host_available_space }}"
            ssh_status: "{{ host_ssh_status }}"
            severity: "{{ 'INFO' if precheck_passed else 'WARNING' }}"
        status_code: [200, 201, 202]
      delegate_to: localhost
      vars:
        ansible_connection: local
      
    - name: Display pre-check results
      debug:
        msg:
          - "========================================="
          - "Host: {{ inventory_hostname }}"
          - "SSH Status: {{ host_ssh_status }}"
          - "Current Build: {{ host_current_build }}"
          - "Available Space: {{ host_available_space }}GB"
          - "Pre-check Status: {{ 'PASSED' if precheck_passed else 'FAILED' }}"
          - "========================================="
          
    - name: Save pre-check results (with sanitized variable names)
      set_stats:
        data:
          "{{ inventory_hostname | replace('-', '_') }}_precheck": "{{ 'passed' if precheck_passed else 'failed' }}"
          "{{ inventory_hostname | replace('-', '_') }}_build": "{{ host_current_build }}"
          "{{ inventory_hostname | replace('-', '_') }}_datastore": "{{ host_selected_datastore }}"
          "host_precheck_{{ inventory_hostname | replace('-', '_') }}": 
            status: "{{ 'passed' if precheck_passed else 'failed' }}"
            build: "{{ host_current_build }}"
            datastore: "{{ host_selected_datastore }}"
            available_space_gb: "{{ host_available_space }}"
