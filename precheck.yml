---
# Pre-Stage: Enable SSH via API before main patching
- name: Pre-Stage - Enable SSH via ESXi API
  hosts: all
  gather_facts: no
  vars:
    esxi_username: "root"
    esxi_password: "{{ vault_esxi_password | default('Ajay@426344') }}"
    dynatrace_url: "https://ofp39563.live.dynatrace.com"
    dynatrace_token: "{{ dynatrace_api_token }}"
    
  tasks:
    - name: Check initial SSH status via API
      uri:
        url: "https://{{ inventory_hostname }}/sdk/vim25/8.0.1.0/ServiceInstance/ServiceInstance/content"
        method: POST
        validate_certs: no
        force_basic_auth: yes
        user: "{{ esxi_username }}"
        password: "{{ esxi_password }}"
        headers:
          Content-Type: "text/xml; charset=utf-8"
          SOAPAction: "urn:vim25/8.0"
        body: |
          <?xml version="1.0" encoding="UTF-8"?>
          <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:vim="urn:vim25">
            <soapenv:Body>
              <vim:RetrieveServiceContent>
                <vim:_this type="ServiceInstance">ServiceInstance</vim:_this>
              </vim:RetrieveServiceContent>
            </soapenv:Body>
          </soapenv:Envelope>
      delegate_to: localhost
      register: service_content
      
    - name: Get session ticket
      uri:
        url: "https://{{ inventory_hostname }}/api/session"
        method: POST
        validate_certs: no
        force_basic_auth: yes
        user: "{{ esxi_username }}"
        password: "{{ esxi_password }}"
        status_code: [200, 201]
      delegate_to: localhost
      register: session_response
      
    - name: Store session ID
      set_fact:
        vmware_session_id: "{{ session_response.json }}"
        
    - name: Get current SSH service status
      uri:
        url: "https://{{ inventory_hostname }}/api/appliance/access/ssh"
        method: GET
        validate_certs: no
        headers:
          vmware-api-session-id: "{{ vmware_session_id }}"
      delegate_to: localhost
      register: ssh_status
      ignore_errors: yes
      
    - name: Alternative - Get host services via REST API
      uri:
        url: "https://{{ inventory_hostname }}/rest/appliance/access/ssh"
        method: GET
        validate_certs: no
        headers:
          vmware-api-session-id: "{{ vmware_session_id }}"
      delegate_to: localhost
      register: ssh_service_status
      when: ssh_status is failed
      
    - name: Enable SSH via ESXi API (Method 1 - Direct Service Control)
      uri:
        url: "https://{{ inventory_hostname }}/sdk"
        method: POST
        validate_certs: no
        force_basic_auth: yes
        user: "{{ esxi_username }}"
        password: "{{ esxi_password }}"
        headers:
          Content-Type: "text/xml; charset=utf-8"
          SOAPAction: "urn:vim25/8.0"
        body: |
          <?xml version="1.0" encoding="UTF-8"?>
          <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:vim="urn:vim25">
            <soapenv:Body>
              <vim:Login>
                <vim:_this type="SessionManager">ha-sessionmgr</vim:_this>
                <vim:userName>{{ esxi_username }}</vim:userName>
                <vim:password>{{ esxi_password }}</vim:password>
              </vim:Login>
            </soapenv:Body>
          </soapenv:Envelope>
      delegate_to: localhost
      register: login_response
      
    - name: Extract session cookie
      set_fact:
        vmware_soap_session: "{{ login_response.cookies['vmware_soap_session'] }}"
      when: login_response is success
      
    - name: Start SSH service via SOAP API
      uri:
        url: "https://{{ inventory_hostname }}/sdk"
        method: POST
        validate_certs: no
        headers:
          Content-Type: "text/xml; charset=utf-8"
          SOAPAction: "urn:vim25/8.0"
          Cookie: "vmware_soap_session={{ vmware_soap_session }}"
        body: |
          <?xml version="1.0" encoding="UTF-8"?>
          <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:vim="urn:vim25">
            <soapenv:Body>
              <vim:StartService>
                <vim:_this type="HostServiceSystem">serviceSystem</vim:_this>
                <vim:id>TSM-SSH</vim:id>
              </vim:StartService>
            </soapenv:Body>
          </soapenv:Envelope>
      delegate_to: localhost
      register: ssh_start_result
      
    - name: Configure SSH service policy to start and stop with host
      uri:
        url: "https://{{ inventory_hostname }}/sdk"
        method: POST
        validate_certs: no
        headers:
          Content-Type: "text/xml; charset=utf-8"
          SOAPAction: "urn:vim25/8.0"
          Cookie: "vmware_soap_session={{ vmware_soap_session }}"
        body: |
          <?xml version="1.0" encoding="UTF-8"?>
          <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:vim="urn:vim25">
            <soapenv:Body>
              <vim:UpdateServicePolicy>
                <vim:_this type="HostServiceSystem">serviceSystem</vim:_this>
                <vim:id>TSM-SSH</vim:id>
                <vim:policy>on</vim:policy>
              </vim:UpdateServicePolicy>
            </soapenv:Body>
          </soapenv:Envelope>
      delegate_to: localhost
      
    - name: Wait for SSH to become available
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost
      
    - name: Test SSH connectivity
      command: ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 {{ esxi_username }}@{{ inventory_hostname }} "vmware -v"
      delegate_to: localhost
      register: ssh_test
      ignore_errors: yes
      no_log: true
      
    - name: Send SSH enablement event to Dynatrace
      uri:
        url: "{{ dynatrace_url }}/api/v2/events/ingest"
        method: POST
        headers:
          Authorization: "Api-Token {{ dynatrace_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          eventType: "CUSTOM_INFO"
          title: "SSH Temporarily Enabled for Patching"
          properties:
            host: "{{ inventory_hostname }}"
            action: "ssh_enabled"
            method: "api_automation"
        status_code: [200, 201, 202]
      delegate_to: localhost
      ignore_errors: yes
      
    - name: Set SSH enabled flag
      set_fact:
        ssh_was_enabled: true
        ssh_session_cookie: "{{ vmware_soap_session }}"
