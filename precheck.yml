---
# Enable SSH via ESXi API - Fixed Version
- name: Enable SSH via ESXi API
  hosts: all
  gather_facts: no
  vars:
    esxi_username: "root"
    esxi_password: "Ajay@426344"
    # Use ansible_host if defined, otherwise use inventory_hostname
    esxi_host: "{{ ansible_host | default(inventory_hostname) }}"
    dynatrace_url: "https://ofp39563.live.dynatrace.com"
    dynatrace_token: "{{ dynatrace_api_token }}"
    
  tasks:
    - name: Display target host information
      debug:
        msg:
          - "Inventory hostname: {{ inventory_hostname }}"
          - "Target IP/Host: {{ esxi_host }}"
          - "Username: {{ esxi_username }}"
          
    - name: Test network connectivity to ESXi host
      wait_for:
        host: "{{ esxi_host }}"
        port: 443
        state: started
        timeout: 10
      delegate_to: localhost
      register: https_check
      
    - name: Enable SSH using simplified SOAP API approach
      block:
        - name: Authenticate and get session cookie
          uri:
            url: "https://{{ esxi_host }}/sdk"
            method: POST
            validate_certs: no
            force_basic_auth: yes
            user: "{{ esxi_username }}"
            password: "{{ esxi_password }}"
            headers:
              Content-Type: "text/xml; charset=utf-8"
              SOAPAction: "urn:vim25/8.0"
            body: |
              <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                <Body>
                  <Login xmlns="urn:vim25">
                    <_this type="SessionManager">SessionManager</_this>
                    <userName>{{ esxi_username }}</userName>
                    <password>{{ esxi_password }}</password>
                  </Login>
                </Body>
              </Envelope>
            timeout: 30
          delegate_to: localhost
          register: login_response
          failed_when: login_response.status != 200
          
        - name: Extract session cookie
          set_fact:
            vmware_session_cookie: "{{ login_response.cookies['vmware_soap_session'] | default('') }}"
            
        - name: Debug login response
          debug:
            msg:
              - "Login status: {{ login_response.status }}"
              - "Session cookie obtained: {{ 'Yes' if vmware_session_cookie else 'No' }}"
          when: vmware_session_cookie
          
        - name: Query current SSH service status
          uri:
            url: "https://{{ esxi_host }}/sdk"
            method: POST
            validate_certs: no
            headers:
              Content-Type: "text/xml; charset=utf-8"
              SOAPAction: "urn:vim25/8.0"
              Cookie: "vmware_soap_session={{ vmware_session_cookie }}"
            body: |
              <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                <Body>
                  <RetrieveServiceContent xmlns="urn:vim25">
                    <_this type="ServiceInstance">ServiceInstance</_this>
                  </RetrieveServiceContent>
                </Body>
              </Envelope>
            timeout: 30
          delegate_to: localhost
          register: service_content
          when: vmware_session_cookie
          
        - name: Start SSH service (TSM-SSH)
          uri:
            url: "https://{{ esxi_host }}/sdk"
            method: POST
            validate_certs: no
            headers:
              Content-Type: "text/xml; charset=utf-8"
              SOAPAction: "urn:vim25/8.0"
              Cookie: "vmware_soap_session={{ vmware_session_cookie }}"
            body: |
              <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                <Body>
                  <StartService xmlns="urn:vim25">
                    <_this type="HostServiceSystem">ha-host-service-system</_this>
                    <id>TSM-SSH</id>
                  </StartService>
                </Body>
              </Envelope>
            timeout: 30
          delegate_to: localhost
          register: start_ssh_result
          failed_when: false
          when: vmware_session_cookie
          
        - name: Update SSH service policy to 'on'
          uri:
            url: "https://{{ esxi_host }}/sdk"
            method: POST
            validate_certs: no
            headers:
              Content-Type: "text/xml; charset=utf-8"
              SOAPAction: "urn:vim25/8.0"
              Cookie: "vmware_soap_session={{ vmware_session_cookie }}"
            body: |
              <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                <Body>
                  <UpdateServicePolicy xmlns="urn:vim25">
                    <_this type="HostServiceSystem">ha-host-service-system</_this>
                    <id>TSM-SSH</id>
                    <policy>on</policy>
                  </UpdateServicePolicy>
                </Body>
              </Envelope>
            timeout: 30
          delegate_to: localhost
          register: update_policy_result
          failed_when: false
          when: vmware_session_cookie
          
      rescue:
        - name: Alternative - Try using esxcli via HTTPS
          uri:
            url: "https://{{ esxi_host }}/sdk"
            method: POST
            validate_certs: no
            force_basic_auth: yes
            user: "{{ esxi_username }}"
            password: "{{ esxi_password }}"
            headers:
              Content-Type: "text/xml"
            body: |
              <?xml version="1.0" encoding="UTF-8"?>
              <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:vim="urn:vim25">
                <soapenv:Body>
                  <vim:RetrieveServiceContent>
                    <vim:_this type="ServiceInstance">ServiceInstance</vim:_this>
                  </vim:RetrieveServiceContent>
                </soapenv:Body>
              </soapenv:Envelope>
          delegate_to: localhost
          register: fallback_attempt
          
    - name: Wait for SSH port to become available
      wait_for:
        host: "{{ esxi_host }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost
      register: ssh_wait_result
      ignore_errors: yes
      
    - name: Test SSH connectivity
      command: |
        sshpass -p "{{ esxi_password }}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
        {{ esxi_username }}@{{ esxi_host }} "hostname && vmware -v"
      delegate_to: localhost
      register: ssh_test
      ignore_errors: yes
      changed_when: false
      no_log: true
      
    - name: Report SSH status
      debug:
        msg:
          - "==============================="
          - "Host: {{ inventory_hostname }}"
          - "IP: {{ esxi_host }}"
          - "SSH Port 22: {{ 'OPEN' if ssh_wait_result is success else 'CLOSED/TIMEOUT' }}"
          - "SSH Test: {{ 'SUCCESS' if ssh_test.rc == 0 else 'FAILED' }}"
          - "{{ ssh_test.stdout if ssh_test.rc == 0 else '' }}"
          - "==============================="
          
    - name: Set SSH enabled flag for later cleanup
      set_fact:
        ssh_was_enabled_by_automation: true
        ssh_enable_timestamp: "{{ ansible_date_time.epoch }}"
      when: ssh_wait_result is success

---
# Alternative method using PowerCLI REST API
- name: Enable SSH via PowerCLI-style REST API
  hosts: all
  gather_facts: no
  vars:
    esxi_host: "{{ ansible_host | default(inventory_hostname) }}"
    esxi_username: "root"
    esxi_password: "Ajay@426344"
    
  tasks:
    - name: Create session using REST API
      uri:
        url: "https://{{ esxi_host }}/rest/com/vmware/cis/session"
        method: POST
        validate_certs: no
        force_basic_auth: yes
        user: "{{ esxi_username }}"
        password: "{{ esxi_password }}"
        status_code: [200, 201]
      delegate_to: localhost
      register: rest_session
      
    - name: Store session token
      set_fact:
        session_token: "{{ rest_session.json.value }}"
      when: rest_session is success
      
    - name: Get host services
      uri:
        url: "https://{{ esxi_host }}/rest/appliance/techpreview/services"
        method: GET
        validate_certs: no
        headers:
          vmware-api-session-id: "{{ session_token }}"
      delegate_to: localhost
      register: services_list
      when: session_token is defined
      
    - name: Start SSH service via REST
      uri:
        url: "https://{{ esxi_host }}/rest/appliance/techpreview/services/ssh/start"
        method: POST
        validate_certs: no
        headers:
          vmware-api-session-id: "{{ session_token }}"
        body_format: json
        body: {}
      delegate_to: localhost
      when: session_token is defined
      ignore_errors: yes

---
# Disable SSH after patching
- name: Disable SSH via ESXi API
  hosts: all
  gather_facts: no
  vars:
    esxi_host: "{{ ansible_host | default(inventory_hostname) }}"
    esxi_username: "root"
    esxi_password: "Ajay@426344"
    
  tasks:
    - name: Check if SSH should be disabled
      set_fact:
        should_disable: "{{ ssh_was_enabled_by_automation | default(false) }}"
        
    - name: Disable SSH service
      when: should_disable
      block:
        - name: Authenticate to get new session
          uri:
            url: "https://{{ esxi_host }}/sdk"
            method: POST
            validate_certs: no
            force_basic_auth: yes
            user: "{{ esxi_username }}"
            password: "{{ esxi_password }}"
            headers:
              Content-Type: "text/xml; charset=utf-8"
              SOAPAction: "urn:vim25/8.0"
            body: |
              <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                <Body>
                  <Login xmlns="urn:vim25">
                    <_this type="SessionManager">SessionManager</_this>
                    <userName>{{ esxi_username }}</userName>
                    <password>{{ esxi_password }}</password>
                  </Login>
                </Body>
              
