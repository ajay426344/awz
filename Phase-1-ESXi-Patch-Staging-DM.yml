---
- name: Phase 1 - ESXi Patch Staging (Core Functionality Only)
  hosts: all
  gather_facts: no
  vars:
    ansible_user: root
    ansible_password: "Ajay@426344"
    ansible_connection: ssh
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    patch_file: "VMware-ESXi-8.0U3g-24859861-depot.zip"
    patch_profile: "ESXi-8.0U3g-24859861-standard"
    patch_source: "/mnt/patches"
    target_build: "24859861"

  tasks:
    - name: Set timestamps
      set_fact:
        current_epoch: "{{ now().strftime('%s') }}"
        phase1_start_time: "{{ now().strftime('%s') }}"

    - name: Check if patch needed
      set_fact:
        needs_patching: "{{ hostvars[inventory_hostname]['host_current_build']|default('0')|int < target_build|int }}"

    - name: Display patching status
      debug:
        msg: "Host {{ inventory_hostname }} needs patching: {{ needs_patching }}"

    - name: Execute staging process
      when: needs_patching
      block:
        - name: Create patches directory
          raw: mkdir -p {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches

        - name: Check if patch file exists
          raw: ls -lh {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }} 2>/dev/null || echo "NOT_FOUND"
          register: patch_exists

        - name: Upload patch file to ESXi host
          copy:
            src: "{{ patch_source }}/{{ patch_file }}"
            dest: "{{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }}"
            mode: '0644'
          when: "'NOT_FOUND' in patch_exists.stdout"
          register: upload_result

        - name: Display upload status
          debug:
            msg: "Upload {{ 'successful' if upload_result is succeeded else 'failed' }}"
          when: "'NOT_FOUND' in patch_exists.stdout"

        - name: Perform dry-run
          raw: |
            esxcli software profile update \
              -d {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }} \
              -p {{ patch_profile }} \
              --dry-run
          register: dry_run_result

        - name: Display dry-run results
          debug:
            msg: 
              - "Dry-run {{ 'passed' if dry_run_result.rc == 0 else 'failed' }}"
              - "Return code: {{ dry_run_result.rc }}"

        - name: Stage patch with no-live-install
          raw: |
            esxcli software profile update \
              -d {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }} \
              -p {{ patch_profile }} \
              --no-live-install
          register: staging_result

        - name: Validate staging success
          set_fact:
            staging_success: "{{ 'The update completed successfully' in staging_result.stdout }}"
            reboot_required: "{{ 'Reboot Required: true' in staging_result.stdout }}"
            phase1_duration: "{{ (now().strftime('%s') | int) - (phase1_start_time | int) }}"

        - name: Display staging results
          debug:
            msg:
              - "========================================="
              - "Host: {{ inventory_hostname }}"
              - "Staging: {{ 'SUCCESS' if staging_success else 'FAILED' }}"
              - "Reboot Required: {{ reboot_required }}"
              - "Duration: {{ phase1_duration }} seconds"
              - "========================================="

    - name: Display skip message if patch not needed
      debug:
        msg: "Host {{ inventory_hostname }} already has target build {{ target_build }} or newer"
      when: not needs_patching
