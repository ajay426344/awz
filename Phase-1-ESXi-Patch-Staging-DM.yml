---
- name: Phase 1 - ESXi Patch Staging (Core Functionality)
  hosts: all
  gather_facts: no
  vars:
    ansible_user: root
    ansible_password: "Ajay@426344"
    ansible_connection: ssh
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    patch_file: "VMware-ESXi-8.0U3g-24859861-depot.zip"
    patch_profile: "ESXi-8.0U3g-24859861-standard"
    patch_source: "/mnt/patches"
    target_build: "24859861"
    
  tasks:
    - name: Set timestamps and start time
      set_fact:
        phase1_start_time: "{{ now().strftime('%s') }}"
        current_time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      
    - name: Display phase start information
      debug:
        msg:
          - "========================================="
          - "Starting Phase 1 - ESXi Patch Staging"
          - "Host: {{ inventory_hostname }}"
          - "Target Build: {{ target_build }}"
          - "Start Time: {{ current_time }}"
          - "========================================="
        
    - name: Check if patch needed
      set_fact:
        needs_patching: "{{ hostvars[inventory_hostname]['host_current_build']|default('0')|int < target_build|int }}"
        
    - name: Display patching eligibility
      debug:
        msg: 
          - "Current Build: {{ hostvars[inventory_hostname]['host_current_build']|default('unknown') }}"
          - "Target Build: {{ target_build }}"
          - "Patching Required: {{ 'YES' if needs_patching else 'NO' }}"
          
    - name: Execute staging process
      when: needs_patching
      block:
        - name: Create patches directory
          raw: mkdir -p {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches
          
        - name: Check if patch file exists
          raw: ls -lh {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }} 2>/dev/null || echo "NOT_FOUND"
          register: patch_exists
          
        - name: Display file status
          debug:
            msg: "Patch file {{ 'already exists' if 'NOT_FOUND' not in patch_exists.stdout else 'needs to be uploaded' }}"
          
        - name: Manual upload instruction
          debug:
            msg: 
              - "UPLOAD REQUIRED:"
              - "Please upload the patch file manually:"
              - "scp {{ patch_source }}/{{ patch_file }} root@{{ inventory_hostname }}:{{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/"
              - "Then press ENTER to continue..."
          when: "'NOT_FOUND' in patch_exists.stdout"
          
        - name: Pause for manual upload
          pause:
            prompt: "Upload the patch file manually and press ENTER to continue"
          when: "'NOT_FOUND' in patch_exists.stdout"
          
        - name: Verify patch file after upload
          raw: ls -lh {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }}
          register: patch_verify
          when: "'NOT_FOUND' in patch_exists.stdout"
          
        - name: Perform dry-run
          raw: |
            esxcli software profile update \
              -d {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }} \
              -p {{ patch_profile }} \
              --dry-run
          register: dry_run_result
          
        - name: Display dry-run results
          debug:
            msg: 
              - "Dry-run Status: {{ 'PASSED' if dry_run_result.rc == 0 else 'FAILED' }}"
              - "Return Code: {{ dry_run_result.rc }}"
              - "Output: {{ dry_run_result.stdout }}"
          
        - name: Proceed with staging if dry-run passed
          when: dry_run_result.rc == 0
          block:
            - name: Stage patch with no-live-install
              raw: |
                esxcli software profile update \
                  -d {{ hostvars[inventory_hostname]['host_selected_datastore']|default('/vmfs/volumes/datastore1') }}/patches/{{ patch_file }} \
                  -p {{ patch_profile }} \
                  --no-live-install
              register: staging_result
              
            - name: Validate staging success
              set_fact:
                staging_success: "{{ 'The update completed successfully' in staging_result.stdout }}"
                reboot_required: "{{ 'Reboot Required: true' in staging_result.stdout }}"
                phase1_duration: "{{ (now().strftime('%s') | int) - (phase1_start_time | int) }}"
                
            - name: Display final staging results
              debug:
                msg:
                  - "========================================="
                  - "PHASE 1 STAGING RESULTS"
                  - "Host: {{ inventory_hostname }}"
                  - "Status: {{ 'SUCCESS' if staging_success else 'FAILED' }}"
                  - "Reboot Required: {{ reboot_required }}"
                  - "Duration: {{ phase1_duration }} seconds"
                  - "Ready for Phase 2: {{ 'YES' if staging_success and reboot_required else 'NO' }}"
                  - "========================================="
        
        - name: Display dry-run failure message
          debug:
            msg:
              - "DRY-RUN FAILED - STAGING ABORTED"
              - "Please check the dry-run output above for errors"
              - "Common issues: incompatible patch, insufficient space, or incorrect profile"
          when: dry_run_result.rc != 0
            
    - name: Display skip message if patch not needed
      debug:
        msg:
          - "========================================="
          - "PHASE 1 SKIPPED"
          - "Host {{ inventory_hostname }} already has target build {{ target_build }} or newer"
          - "No staging required"
          - "========================================="
      when: not needs_patching
