---
- name: Fix ESXi Network Connectivity for HTTP Downloads
  hosts: all
  gather_facts: no
  vars:
    ansible_user: root
    ansible_password: "Ajay@426344"
    ansible_connection: ssh
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    http_server_ip: "192.168.0.110"
    http_server_port: "8080"
    
  tasks:
    - name: Check current network configuration
      raw: |
        echo "=== Network Configuration ==="
        esxcli network ip interface list
        echo ""
        echo "=== Routing Table ==="
        esxcli network ip route ipv4 list
        echo ""
        echo "=== DNS Configuration ==="
        esxcli network ip dns server list
      register: network_config
      
    - name: Display network configuration
      debug:
        msg: "{{ network_config.stdout_lines }}"
        
    - name: Test connectivity to HTTP server
      raw: |
        echo "=== Testing connectivity to {{ http_server_ip }} ==="
        ping -c 3 {{ http_server_ip }}
        PING_RESULT=$?
        
        if [ $PING_RESULT -ne 0 ]; then
          echo "ERROR: Cannot ping HTTP server"
          echo "Checking ARP table:"
          esxcli network ip neighbor list
        else
          echo "SUCCESS: Can ping HTTP server"
        fi
      register: ping_test
      
    - name: Display ping test results
      debug:
        msg: "{{ ping_test.stdout_lines }}"
        
    - name: Check and fix ESXi firewall for HTTP client
      raw: |
        echo "=== Current Firewall Status ==="
        esxcli network firewall get
        
        echo -e "\n=== HTTP Related Rules ==="
        esxcli network firewall ruleset list | grep -E "httpClient|http"
        
        echo -e "\n=== Enabling httpClient ruleset ==="
        esxcli network firewall ruleset set -e true -r httpClient
        
        echo -e "\n=== Verifying httpClient is enabled ==="
        esxcli network firewall ruleset list | grep httpClient
        
        echo -e "\n=== Checking allowed IPs for httpClient ==="
        esxcli network firewall ruleset allowedip list -r httpClient
      register: firewall_fix
      
    - name: Display firewall fix results
      debug:
        msg: "{{ firewall_fix.stdout_lines }}"
        
    - name: Add specific IP to httpClient ruleset if needed
      raw: |
        echo "=== Adding {{ http_server_ip }} to httpClient allowed IPs ==="
        
        # First, check if we need to allow all IPs temporarily
        esxcli network firewall ruleset set -e true -r httpClient
        esxcli network firewall ruleset allowedip add -r httpClient -i {{ http_server_ip }}
        
        # Or allow all IPs (less secure but works for testing)
        # esxcli network firewall ruleset set -a true -r httpClient
        
        echo "=== Updated allowed IPs ==="
        esxcli network firewall ruleset allowedip list -r httpClient
      register: firewall_ip
      
    - name: Display firewall IP results
      debug:
        msg: "{{ firewall_ip.stdout_lines }}"
        
    - name: Test HTTP connectivity with curl
      raw: |
        echo "=== Testing HTTP with curl ==="
        if command -v curl >/dev/null 2>&1; then
          curl -I --connect-timeout 5 http://{{ http_server_ip }}:{{ http_server_port }}/
        else
          echo "curl not available, testing with wget"
          wget --spider --timeout=5 http://{{ http_server_ip }}:{{ http_server_port }}/ 2>&1
        fi
      register: http_test
      
    - name: Display HTTP test results
      debug:
        msg: "{{ http_test.stdout_lines }}"
        
    - name: Test with nc (netcat) if available
      raw: |
        echo "=== Testing port {{ http_server_port }} with nc ==="
        if command -v nc >/dev/null 2>&1; then
          echo "GET / HTTP/1.0\r\n\r\n" | nc -w 5 {{ http_server_ip }} {{ http_server_port }} | head -5
        else
          echo "nc not available"
        fi
      register: nc_test
      failed_when: false
      
    - name: Display nc test results
      debug:
        msg: "{{ nc_test.stdout_lines }}"
      when: nc_test.rc == 0
      
    - name: Alternative - Set up local port forwarding (if needed)
      debug:
        msg:
          - "If the above doesn't work, you may need to:"
          - "1. Check if HTTP server is bound to all interfaces (0.0.0.0:8080 not just 127.0.0.1:8080)"
          - "2. Check HTTP server's firewall (on {{ http_server_ip }})"
          - "3. Verify no network segmentation between ESXi and HTTP server"
          - "4. Consider using a different port (80, 443)"
          
    - name: Try alternative approach - Mount NFS datastore
      debug:
        msg:
          - "Alternative: Mount patch directory as NFS datastore"
          - "On HTTP server ({{ http_server_ip }}):"
          - "  1. apt-get install nfs-kernel-server"
          - "  2. echo '/var/www/patches *(ro,sync,no_subtree_check)' >> /etc/exports"
          - "  3. systemctl restart nfs-kernel-server"
          - "On ESXi:"
          - "  esxcli storage nfs41 add -H {{ http_server_ip }} -s /var/www/patches -v patches"

---
- name: Alternative - Local HTTP Server on Different Port
  hosts: localhost
  gather_facts: no
  vars:
    patch_file: "VMware-ESXi-8.0U3g-24859861-depot.zip"
    patch_directory: "/var/www/patches"
    
  tasks:
    - name: Check if we can use standard HTTP port 80
      shell: |
        sudo lsof -i:80 2>/dev/null | grep LISTEN || echo "Port 80 is free"
      register: port80_check
      
    - name: Start HTTP server on port 80 if available
      shell: |
        cd {{ patch_directory }}
        sudo python3 -m http.server 80 &
        sleep 2
        curl -I http://localhost/{{ patch_file }} | head -3
      when: "'Port 80 is free' in port80_check.stdout"
      register: http80_server
      
    - name: Display alternative server info
      debug:
        msg: 
          - "If port 8080 is blocked, try port 80:"
          - "sudo python3 -m http.server 80 --directory {{ patch_directory }}"
          - "Then update playbook with: http_server_url: 'http://192.168.0.110'"
